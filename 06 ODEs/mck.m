function [tt,x,v] = mck(m,c,k,u,t,x0,v0,options)
% mck:  Solves the canonical mass-spring-damper 2nd order ODE given by:
%                   m(d^2x/dt^2) + c(dx/dt) + kx = u(t)
%       The ODE is solved using MATLAB's ode45() function. 
%       This function is specifically written with parameter flexibility in mind; 
%       nearly all parameters can be customized by the user.
% 
% Inputs:
%   m:          Cart's mass [kg] (scalar)
%   c:          Damping coefficient [N*s/m] (scalar)
%   k:          Spring stiffness [N/m] (scalar)
%   u:          Forcing function [N] (anonymous function)
%   t:          Interval of integration [s] (vector)
%                   t can be either a 2-element vector specifying only the start and end times,
%                   or a 3+ element vector containing all the points at which to solve the ODE.
%   x0:         Initial position [m] (scalar)
%   v0:         Initial velocity [m/s] (scalar)
%   options:    Additional ode45() accuracy options (see ode45() documentation)
% 
% Outputs:
%   tt:   Output time vector [s] (vector)
%           If t contains 2 elements, tt is auto-generated by MATLAB's adaptive time step algorithm. 
%           If t contains 3+ elements, tt = t.
%   x:    Cart's position [m] (vector)
%   v:    Cart's velocity [m/s] (vector)

zdot = @(t,z) [z(2);
    (-c/m)*z(2) - (k/m)*z(1) + u(t)/m];         % Decompose 2nd order ODE into a system of 1st order ODEs
% zdot = @(t,z) [0 1; (-k/m) (-c/m)]*[z(1); z(2)] + [0; (1/m)]*u(t);      % In matrix form

[tt,z] = ode45(zdot,t,[x0 v0],options);

x = z(:,1);         % Parse position
v = z(:,2);         % Parse velocity
end